#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServiceWebRole1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IOST")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConsumptions(Consumptions instance);
    partial void UpdateConsumptions(Consumptions instance);
    partial void DeleteConsumptions(Consumptions instance);
    partial void InsertTemperatures(Temperatures instance);
    partial void UpdateTemperatures(Temperatures instance);
    partial void DeleteTemperatures(Temperatures instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["IOSTConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Consumptions> Consumptions
		{
			get
			{
				return this.GetTable<Consumptions>();
			}
		}
		
		public System.Data.Linq.Table<Temperatures> Temperatures
		{
			get
			{
				return this.GetTable<Temperatures>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consumptions")]
	public partial class Consumptions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PK_ID;
		
		private int _FK_Device;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPK_IDChanging(int value);
    partial void OnPK_IDChanged();
    partial void OnFK_DeviceChanging(int value);
    partial void OnFK_DeviceChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Consumptions()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PK_ID
		{
			get
			{
				return this._PK_ID;
			}
			set
			{
				if ((this._PK_ID != value))
				{
					this.OnPK_IDChanging(value);
					this.SendPropertyChanging();
					this._PK_ID = value;
					this.SendPropertyChanged("PK_ID");
					this.OnPK_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Device", DbType="Int NOT NULL")]
		public int FK_Device
		{
			get
			{
				return this._FK_Device;
			}
			set
			{
				if ((this._FK_Device != value))
				{
					this.OnFK_DeviceChanging(value);
					this.SendPropertyChanging();
					this._FK_Device = value;
					this.SendPropertyChanged("FK_Device");
					this.OnFK_DeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Temperatures")]
	public partial class Temperatures : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PK_ID;
		
		private int _FK_Device;
		
		private System.Nullable<double> _S1;
		
		private System.Nullable<double> _S2;
		
		private System.Nullable<double> _S3;
		
		private System.Nullable<double> _S4;
		
		private System.Nullable<double> _S5;
		
		private System.Nullable<double> _S6;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPK_IDChanging(int value);
    partial void OnPK_IDChanged();
    partial void OnFK_DeviceChanging(int value);
    partial void OnFK_DeviceChanged();
    partial void OnS1Changing(System.Nullable<double> value);
    partial void OnS1Changed();
    partial void OnS2Changing(System.Nullable<double> value);
    partial void OnS2Changed();
    partial void OnS3Changing(System.Nullable<double> value);
    partial void OnS3Changed();
    partial void OnS4Changing(System.Nullable<double> value);
    partial void OnS4Changed();
    partial void OnS5Changing(System.Nullable<double> value);
    partial void OnS5Changed();
    partial void OnS6Changing(System.Nullable<double> value);
    partial void OnS6Changed();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Temperatures()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PK_ID
		{
			get
			{
				return this._PK_ID;
			}
			set
			{
				if ((this._PK_ID != value))
				{
					this.OnPK_IDChanging(value);
					this.SendPropertyChanging();
					this._PK_ID = value;
					this.SendPropertyChanged("PK_ID");
					this.OnPK_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Device", DbType="Int NOT NULL")]
		public int FK_Device
		{
			get
			{
				return this._FK_Device;
			}
			set
			{
				if ((this._FK_Device != value))
				{
					this.OnFK_DeviceChanging(value);
					this.SendPropertyChanging();
					this._FK_Device = value;
					this.SendPropertyChanged("FK_Device");
					this.OnFK_DeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S1", DbType="Float")]
		public System.Nullable<double> S1
		{
			get
			{
				return this._S1;
			}
			set
			{
				if ((this._S1 != value))
				{
					this.OnS1Changing(value);
					this.SendPropertyChanging();
					this._S1 = value;
					this.SendPropertyChanged("S1");
					this.OnS1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S2", DbType="Float")]
		public System.Nullable<double> S2
		{
			get
			{
				return this._S2;
			}
			set
			{
				if ((this._S2 != value))
				{
					this.OnS2Changing(value);
					this.SendPropertyChanging();
					this._S2 = value;
					this.SendPropertyChanged("S2");
					this.OnS2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S3", DbType="Float")]
		public System.Nullable<double> S3
		{
			get
			{
				return this._S3;
			}
			set
			{
				if ((this._S3 != value))
				{
					this.OnS3Changing(value);
					this.SendPropertyChanging();
					this._S3 = value;
					this.SendPropertyChanged("S3");
					this.OnS3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S4", DbType="Float")]
		public System.Nullable<double> S4
		{
			get
			{
				return this._S4;
			}
			set
			{
				if ((this._S4 != value))
				{
					this.OnS4Changing(value);
					this.SendPropertyChanging();
					this._S4 = value;
					this.SendPropertyChanged("S4");
					this.OnS4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S5", DbType="Float")]
		public System.Nullable<double> S5
		{
			get
			{
				return this._S5;
			}
			set
			{
				if ((this._S5 != value))
				{
					this.OnS5Changing(value);
					this.SendPropertyChanging();
					this._S5 = value;
					this.SendPropertyChanged("S5");
					this.OnS5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S6", DbType="Float")]
		public System.Nullable<double> S6
		{
			get
			{
				return this._S6;
			}
			set
			{
				if ((this._S6 != value))
				{
					this.OnS6Changing(value);
					this.SendPropertyChanging();
					this._S6 = value;
					this.SendPropertyChanged("S6");
					this.OnS6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
